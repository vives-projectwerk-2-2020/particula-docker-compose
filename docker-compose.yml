version: '3'

services:
  ################################################
  ####        Traefik Proxy Setup           #####
  ###############################################
  traefik:
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      # - "8080:8080" # <== :8080 is where the dashboard runs on
      - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=false # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/dynamic.yml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      # - --certificatesresolvers.mytlschallenge.acme.email=arno.willems@student.vives.be # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      - ./dynamic.yml:/dynamic.yml # <== Volume for dynamic conf file, **ref: line 27
      # - ./usersfile:/usersfile
    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
    #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Prefix(`/traefik`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
      - "traefik.http.routers.api.middlewares=auth"
      ## https://docs.traefik.io/middlewares/basicauth/
      # echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
      - "traefik.http.middlewares.auth.basicauth.users=arno:$$apr1$$cUz7.Cx4$$dxuosccFFo5gC1URBCZwx."
      # - "traefik.http.middlewares.auth.basicauth.usersfile=/usersfile"
      - "traefik.http.middlewares.auth.basicauth.headerField=X-WebAuth-User"
      - "traefik.http.middlewares.auth.basicauth.removeheader=true"
      - "traefik.http.routers.api.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.api-secured.rule=Path(`/traefik`) || PathPrefix(`/traefik/`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.api-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.api-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - 8086
    volumes:
      - influxdb-storage:/var/lib/influxdb
    restart: always
    env_file:
      - .env
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - influxdb
    restart: always
    environment:
      - GF_SERVER_ROOT_URL=http://${DOMAIN}/grafana
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    env_file:
      - .env
    networks:
      - web
      - backend
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Path(`/grafana`) || PathPrefix(`/grafana/`)"
      - 'traefik.http.routers.grafana.entrypoints=web'
      - 'traefik.http.middlewares.grafana-compress.compress=true'
      - "traefik.http.routers.grafana.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.grafana-secured.rule=Path(`/grafana`) || PathPrefix(`/grafana/`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.grafana-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.grafana-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https

  db:
    image: mariadb
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
    networks:
      - backend

  backend:
    image: docker.pkg.github.com/vives-projectwerk-2-2020/back-end/particula-back-end-dev
    container_name: backend
    restart: always
    env_file:
      - .env
    ports:
      - 8080:3000
    networks:
      - backend

  lorawan: 
    image: docker.pkg.github.com/vives-projectwerk-2-2020/lorawan-listener/particula-lorawan-listener-dev
    container_name: lorawan
    restart: always
    env_file:
      - .env
    networks:
      - backend

  frontend:
    image: docker.pkg.github.com/vives-projectwerk-2-2020/frontend/particula-frontend-dev
    container_name: frontend
    restart: always
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.frontend.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.frontend.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.frontend-secured.rule=Host(`${DOMAIN}`)" # <== Your Domain Name for the https rule 
      - "traefik.http.routers.frontend-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.frontend-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https

networks:
  web:
    external: true
  backend:
    external: false

volumes:
  influxdb-storage:
  grafana-storage:
  db: